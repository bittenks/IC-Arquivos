# -*- coding: utf-8 -*-
"""lazy-40- corn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16di70dh1wT4XwJruuKH767ZS-UZvz4E_

Lazy Predict ajuda a construir muitos modelos básicos sem muito código e ajuda a entender quais modelos funcionam melhor sem qualquer ajuste de parâmetro.
"""

import pandas as pd
import numpy as np

!pip install pyforest

!pip install lazypredict

!pip install pyforest

"""Importação das Bibliotecas

"""

import pyforest
from lazypredict.Supervised import LazyRegressor
from pandas.plotting import scatter_matrix

lazy_imports()

"""Importaao de Pacotes

"""

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn import metrics
from sklearn.metrics import mean_squared_error

"""Esconder avisos

"""

import warnings

warnings.filterwarnings('ignore')

"""Exibir no máximo 100 colunas

"""

pd.options.display.max_columns = 120

"""importar database

"""

url = 'https://github.com/bittenks/csv-soybean-corn/raw/main/USDA_corn_2014to2020%20-%20USDA_corn_2014to2020.csv'
corn = pd.read_csv(url)

"""Checar se tem algum valor nulo

"""

corn = corn.drop(columns=['Date'])

corn.info()

corn.describe()

corn.replace([np.inf, -np.inf], np.nan, inplace=True)
corn.dropna(inplace=True)

X = corn.drop(columns=['Average', 'Value','Diff_Value','Diff_Avr'])
y = corn.Average

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=3,test_size=0.25)

reg = LazyRegressor(ignore_warnings=False, custom_metric=None)
models, predictions = reg.fit(X_train, X_test, y_train, y_test)
print(models)

from sklearn.experimental import enable_hist_gradient_boosting

from sklearn.ensemble import HistGradientBoostingRegressor

def rmse(model, y_test, y_pred, X_train, y_train):
  r_squared = model.score(X_test, y_test)
  mse = mean_squared_error(y_test, y_pred)
  rmse = np.sqrt(mse)
  print('R-squared:  '+ str(r_squared))
  print('Mean Squared Error: '+ str(rmse))

def scatter_plot(y_test, y_pred, model_name):
   plt.figure(figsize=(10,6))
   sns.residplot(y_test, y_pred, lowess=True, color='#4682b4',
             line_kws={'lw': 2, 'color': 'r'})
   plt.title(str('test vs predict for '+ model_name))
   plt.xlabel('Average',fontsize=16)
   plt.xticks(fontsize=13)
   plt.yticks(fontsize=13)
   plt.show()

hist = HistGradientBoostingRegressor()
hist.fit(X_train, y_train)
y_pred = hist.predict(X_test)

rmse(hist, y_test, y_pred, X_train, y_train)

scatter_plot(y_test, y_pred,'teste')